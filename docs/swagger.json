{
    "swagger": "2.0",
    "info": {
        "description": "API documentation for Crypto Studio Backend",
        "title": "Crypto Studio Backend API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "admintool@investicstudio.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "basePath": "/api/v2/",
    "paths": {
        "/auth/exist-email": {
            "post": {
                "description": "Verifies if a given email is already registered",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Check if email exists",
                "parameters": [
                    {
                        "description": "Email request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EmailReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates user and returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/active-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Activate the selected CEX wallet for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Activate CEX wallet",
                "parameters": [
                    {
                        "description": "CEX wallet id",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.cexWalletIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/add-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Link a CEX account to the current authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Connect CEX wallet",
                "parameters": [
                    {
                        "description": "CEX connect payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CexConnectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/deactive-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deactivate the selected CEX wallet for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Deactivate CEX wallet",
                "parameters": [
                    {
                        "description": "CEX wallet id",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.cexWalletIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/subscribe-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribe an author to a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Subscribe author",
                "parameters": [
                    {
                        "description": "Subscribe author payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.cexAuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/unsubscribe-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Unsubscribe an author from a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Unsubscribe author",
                "parameters": [
                    {
                        "description": "Unsubscribe author payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.cexAuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/update-api-key": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the API key and secret of a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Update API credentials",
                "parameters": [
                    {
                        "description": "API credential payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CexUpdateAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/update-holding-period": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the holding period (in hours) configured for a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Update holding period",
                "parameters": [
                    {
                        "description": "Holding period payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CexUpdateHoldingPeriodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/update-position-size": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the position size percentage of a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Update position size percentage",
                "parameters": [
                    {
                        "description": "Position size payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CexUpdatePositionSizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/update-sl": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the stop loss percentage of a CEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Update stop loss",
                "parameters": [
                    {
                        "description": "Stop loss payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CexUpdateSLRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/wallet-info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve CEX wallets for the current authenticated user filtered by exchange",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "List CEX wallets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange identifier (e.g. bybit)",
                        "name": "exchange",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.CexWalletInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/cex/wallet-total-value": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the total value of a CEX wallet for the current authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/cex"
                ],
                "summary": "Get wallet total value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CEX wallet ID",
                        "name": "wallet_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange identifier (e.g. binance-th)",
                        "name": "exchange",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CexWalletTotalValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/check-refcode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Checks if a referral code is valid and not yet used, then updates it with the user's UUID if available",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Check and update a referral code",
                "parameters": [
                    {
                        "description": "Referral code request with code and user ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.CheckRefcodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.CheckRefcodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/check-user-id": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Verifies if the given User ID is already registered in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Check if User ID exists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.CheckUserIDExistsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/check-xuser": {
            "post": {
                "description": "Check X user and telegram alert are exit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Check X user is exit",
                "parameters": [
                    {
                        "description": "XUser",
                        "name": "xUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.XUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.CheckXUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/get-crypto-user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get crypto user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Get crypto user data",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number (starting from 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort by waiting_list_timestamp (asc or desc)",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by twitter_name or email",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by copytrade approval (true/false)",
                        "name": "is_copytrade_approved",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/get_refferal_score": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get refferal score",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Get refferal score",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/get_user_referral": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get User Referral",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Get User Referral",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/get_users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns all users with uuid, email, and twitter_uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/kol_refer_detail": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches KOL referral details with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Get KOL referral details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/login": {
            "post": {
                "description": "Authenticates CRM user and returns JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "CRM User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CRMLoginBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login, returns JWT token. Example: {\\\"token\\\": \\\"\u003cjwt\u003e\\\"}",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/crm/new-kol": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new KOL user and associates a KOL code. Requires valid CRM user and unique display code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Create a new KOL user",
                "parameters": [
                    {
                        "description": "KOL User Payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.KOLUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "KOL user created successfully\", e.g., {\\\"kolUserID\\\": \\\"abc123\\\"}"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, validation failed, or duplicate KOL user",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - CRM user does not exist",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Validation or DB operation failed",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/crm/privy-user-overview": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns user profile, wallets (with subscriptions), and trade logs. Filter logs by status and order by execution date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Search privy copytrade user overview by user id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (crypto_user.id)",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter trade_logs.status (e.g. success, fail)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Order by executed_at (asc or desc)",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 200,
                        "description": "Max logs to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Logs offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/update-crypto-user-approve": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user's copytrade approval (waiting list) status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Update copytrade approval status",
                "parameters": [
                    {
                        "description": "Approve payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateCryptoUserApproveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/crm/update_display_code": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the display_code for a user if not duplicated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CRM"
                ],
                "summary": "Update display_code for a user",
                "parameters": [
                    {
                        "description": "Update display_code",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateDisplayCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/active-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Set the selected DEX wallet as active for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Activate DEX wallet",
                "parameters": [
                    {
                        "description": "DEX wallet activation payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.dexWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/add-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Link a DEX account to the current authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Connect DEX wallet",
                "parameters": [
                    {
                        "description": "DEX connect payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexConnectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/deactive-wallet": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark the selected DEX wallet as inactive for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Deactivate DEX wallet",
                "parameters": [
                    {
                        "description": "DEX wallet deactivation payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.dexWalletRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/subscribe-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Subscribe the specified author for copy-trading on a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Subscribe author",
                "parameters": [
                    {
                        "description": "Author payload",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/unsubscribe-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove the author subscription from a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Unsubscribe author",
                "parameters": [
                    {
                        "description": "Author payload",
                        "name": "author",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UnAuthorRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/update-api-credentials": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the API key, private key, and trading account of a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Update DEX API credentials",
                "parameters": [
                    {
                        "description": "DEX API credential payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexUpdateAPICredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/update-holding-period": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the holding period (in hours) configured for a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Update holding period",
                "parameters": [
                    {
                        "description": "Holding period payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexUpdateHoldingPeriodRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/update-leverage": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the leverage of a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Update leverage",
                "parameters": [
                    {
                        "description": "Leverage payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexUpdateLeverageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/update-position-size": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the position size percentage of a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Update position size",
                "parameters": [
                    {
                        "description": "Position size payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexUpdatePositionSizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/update-sl": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the stop loss percentage of a DEX wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Update stop loss",
                "parameters": [
                    {
                        "description": "Stop loss payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DexUpdateSLRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/wallet-info": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve DEX wallets for the current authenticated user filtered by exchange",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "List DEX wallets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange identifier (e.g. dydx)",
                        "name": "exchange",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.WalletInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/dex/wallet-total-value": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the total value of a DEX wallet for the current authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "copytrade/dex"
                ],
                "summary": "Get wallet total value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DEX wallet ID",
                        "name": "wallet_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange identifier (e.g. dydx)",
                        "name": "exchange",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DexWalletTotalValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/features/{featureName}": {
            "get": {
                "description": "Retrieves the status of a feature by its name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "features"
                ],
                "summary": "Get feature by name",
                "parameters": [
                    {
                        "type": "string",
                        "default": "refcode",
                        "description": "Feature Name",
                        "name": "featureName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetFeatureResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/generate-refcode": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates and saves a referral code for the provided Crypto User ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Generate a new referral code",
                "parameters": [
                    {
                        "description": "Crypto User ID to generate refcode",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.GenerateRefcodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GenerateRefcodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/generate-refcode-bynum": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a specific number of referral codes for a given user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Generate referral codes by number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of referral codes to generate",
                        "name": "genNum",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "refcodes",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/get-crypto-ref-user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches refcodes and their corresponding user's email who used the refcode",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Get Crypto Referral User details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetCryptoRefUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/get-kolcode": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches KOL code and number of uses.\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Get KOL code and number of uses.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetCryptoRefUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/get-refferal-score": {
            "get": {
                "description": "Get users refferal score.\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Get users refferal score.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetCryptoRefUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/get-refferal-score-ranking": {
            "post": {
                "description": "Returns referral score rankings with rank changes compared to N days ago.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "refcode"
                ],
                "summary": "Get referral score rankings with rank changes",
                "parameters": [
                    {
                        "description": "Number of days to look back for rank comparison",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.OffsetDaysRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved ranking data",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.RefferalScoreRanking"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server-side error occurred",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/market-overview/sentiment-market-overview": {
            "get": {
                "description": "Retrieves the market data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-overview"
                ],
                "summary": "Get merket overview data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/add-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "add new author to group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "add new author to group godoc",
                "parameters": [
                    {
                        "description": "Add New Author",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddAuthor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/add-group": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add new group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Add new group godoc",
                "parameters": [
                    {
                        "description": "Add New Group",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/count-group": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Count user's group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Count user's group godoc",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/delete-group-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete all author in group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Delete all author in group godoc",
                "parameters": [
                    {
                        "description": "Delete all author in group",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.DeleteGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/disconnect": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete telegram data, group id and author",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Delete telegram data, group id and author godoc",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/get-group": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get Notification group list by uid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get Notification group list by uid",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/get-telegram": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user telegram data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get user telegram data godoc",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/remove-author": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "remove author from group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "remove author from group godoc",
                "parameters": [
                    {
                        "description": "Remove Author",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RemoveAuthor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/update-group-name": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update group name by group id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Update group name by group id",
                "parameters": [
                    {
                        "description": "Update Group Name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateGroupNameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notification/update-telegram": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user telegram data if telegram user id and chat id are valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Update user telegram data godoc",
                "parameters": [
                    {
                        "description": "Update Telegram Data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.TelegramUpsert"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/performance/get-author-detail": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get author detail with merged timeline of tweets and signals, including pagination metadata and sentiment analysis data (bearishTokens and bullishTokens) categorized by the specified period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Performance"
                ],
                "summary": "Get author performance details with merged timeline and sentiment analysis",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"0xkyle__\"",
                        "description": "Author Username",
                        "name": "author_username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "7D",
                            "1M",
                            "ALL"
                        ],
                        "type": "string",
                        "example": "\"7D\"",
                        "description": "Period",
                        "name": "period",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Start offset for pagination",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Limit for pagination (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AuthorDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/performance/get-author-multiholding-detail": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get author detail with merged timeline of tweets and signals, including pagination metadata and sentiment analysis data (bearishTokens and bullishTokens) categorized by the specified period, using multiholding portfolio NAV data based on the holding period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Performance"
                ],
                "summary": "Get author performance details with multiholding portfolio NAV data",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"0xkyle__\"",
                        "description": "Author Username",
                        "name": "author_username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "7D",
                            "1M",
                            "ALL"
                        ],
                        "type": "string",
                        "example": "\"7D\"",
                        "description": "Period",
                        "name": "period",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "24",
                            "48",
                            "72",
                            "96",
                            "120",
                            "144",
                            "168"
                        ],
                        "type": "string",
                        "example": "\"24\"",
                        "description": "Holding Period (Hours)",
                        "name": "holding_period",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Start offset for pagination",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Limit for pagination (max 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AuthorDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/performance/get-author-nav": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get author performance navigation data for all authors in specified period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Performance"
                ],
                "summary": "Get author navigation performance data",
                "parameters": [
                    {
                        "enum": [
                            "7D",
                            "1M",
                            "ALL"
                        ],
                        "type": "string",
                        "example": "\"7D\"",
                        "description": "Period",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AuthorNav"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/performance/get-multiholding-port-nav": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get multiholding portfolio NAV performance data with different holding period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Performance"
                ],
                "summary": "Get multiholding portfolio NAV performance data with different holding period",
                "parameters": [
                    {
                        "enum": [
                            "7D",
                            "1M",
                            "ALL"
                        ],
                        "type": "string",
                        "default": "7D",
                        "example": "\"7D\"",
                        "description": "NAV Period",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "24",
                            "48",
                            "72",
                            "96",
                            "120",
                            "144",
                            "168"
                        ],
                        "type": "string",
                        "default": "24",
                        "example": "\"24\"",
                        "description": "Holding Period (Hours)",
                        "name": "holding_period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AuthorNav"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AddAuthor": {
            "type": "object",
            "properties": {
                "author_name": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                }
            }
        },
        "handler.AddGroup": {
            "type": "object",
            "properties": {
                "group_name": {
                    "type": "string"
                }
            }
        },
        "handler.AuthorRequest": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handler.CheckRefcodeRequest": {
            "type": "object",
            "required": [
                "ref_code"
            ],
            "properties": {
                "ref_code": {
                    "description": "UserID  string `json:\"user_id\" validate:\"required\"`",
                    "type": "string"
                }
            }
        },
        "handler.CheckRefcodeResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "boolean"
                }
            }
        },
        "handler.CheckUserIDExistsResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "boolean"
                }
            }
        },
        "handler.DeleteGroup": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                }
            }
        },
        "handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "handler.GenerateRefcodeRequest": {
            "type": "object",
            "required": [
                "crypto_user_id"
            ],
            "properties": {
                "crypto_user_id": {
                    "type": "string"
                }
            }
        },
        "handler.GenerateRefcodeResponse": {
            "type": "object",
            "properties": {
                "refcodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.GetCryptoRefUserResponse": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "handler.GetFeatureResponse": {
            "type": "object",
            "properties": {
                "feature_enable": {
                    "type": "boolean",
                    "example": true
                },
                "feature_name": {
                    "type": "string",
                    "example": "refcode"
                }
            }
        },
        "handler.OffsetDaysRequest": {
            "type": "object",
            "required": [
                "offset_days"
            ],
            "properties": {
                "offset_days": {
                    "type": "integer"
                }
            }
        },
        "handler.RemoveAuthor": {
            "type": "object",
            "properties": {
                "group_auther_id": {
                    "type": "string"
                }
            }
        },
        "handler.TelegramUpsert": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handler.UnAuthorRequest": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handler.UpdateCryptoUserApproveRequest": {
            "type": "object",
            "properties": {
                "approve": {
                    "type": "boolean"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "handler.UpdateDisplayCodeRequest": {
            "type": "object",
            "properties": {
                "crypto_user_id": {
                    "type": "string"
                },
                "display_code": {
                    "type": "string"
                }
            }
        },
        "handler.UpdateGroupNameRequest": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "new_group_name": {
                    "type": "string"
                }
            }
        },
        "handler.cexAuthorRequest": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handler.cexWalletIDRequest": {
            "type": "object",
            "properties": {
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "handler.dexWalletRequest": {
            "type": "object",
            "properties": {
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "model.AuthorDetail": {
            "type": "object",
            "properties": {
                "WeightNav": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Nav"
                    }
                },
                "authorName": {
                    "type": "string"
                },
                "bearishTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SentimentToken"
                    }
                },
                "bullishTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SentimentToken"
                    }
                },
                "drawdown": {
                    "type": "number"
                },
                "end": {
                    "type": "integer"
                },
                "endNav": {
                    "type": "number"
                },
                "limit": {
                    "type": "integer"
                },
                "maximumDrawdown": {
                    "type": "number"
                },
                "profile": {
                    "$ref": "#/definitions/model.AuthorProfile"
                },
                "recentTimeline": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.AuthorTweetWithSignals"
                    }
                },
                "roi": {
                    "type": "number"
                },
                "start": {
                    "type": "integer"
                },
                "startNav": {
                    "type": "number"
                },
                "totalTimeline": {
                    "type": "integer"
                }
            }
        },
        "model.AuthorNav": {
            "type": "object",
            "properties": {
                "WeightNav": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Nav"
                    }
                },
                "authorName": {
                    "type": "string"
                },
                "authorUsername": {
                    "type": "string"
                },
                "drawdown": {
                    "type": "number"
                },
                "endNav": {
                    "type": "number"
                },
                "maximumDrawdown": {
                    "type": "number"
                },
                "rank": {
                    "type": "integer"
                },
                "roi": {
                    "type": "number"
                },
                "startNav": {
                    "type": "number"
                }
            }
        },
        "model.AuthorProfile": {
            "type": "object",
            "properties": {
                "author_followers": {
                    "type": "integer"
                },
                "author_following": {
                    "type": "integer"
                },
                "author_name": {
                    "type": "string"
                },
                "author_tier": {
                    "type": "string"
                },
                "author_twitter_url": {
                    "type": "string"
                },
                "author_url": {
                    "type": "string"
                },
                "author_username": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.AuthorTweetWithSignals": {
            "type": "object",
            "properties": {
                "bookmark_count": {
                    "type": "integer"
                },
                "conversation_id": {
                    "type": "string"
                },
                "id": {
                    "description": "Tweet data",
                    "type": "string"
                },
                "is_pinned": {
                    "type": "boolean"
                },
                "is_quote": {
                    "type": "boolean"
                },
                "is_reply": {
                    "type": "boolean"
                },
                "is_retweet": {
                    "type": "boolean"
                },
                "like_count": {
                    "type": "integer"
                },
                "media_url": {
                    "type": "string"
                },
                "quote_count": {
                    "type": "integer"
                },
                "reply_count": {
                    "type": "integer"
                },
                "retweet_count": {
                    "type": "integer"
                },
                "signal_action": {
                    "type": "string"
                },
                "signal_created_at": {
                    "type": "string"
                },
                "signal_prompt_version": {
                    "type": "string"
                },
                "signal_score": {
                    "type": "integer"
                },
                "signal_sentiment": {
                    "type": "string"
                },
                "signal_ticker": {
                    "description": "Signal data (optional - may be null if no signal exists)",
                    "type": "string"
                },
                "signal_updated_at": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "tickers_rule_based": {
                    "type": "string"
                },
                "tweet_created_at": {
                    "type": "string"
                },
                "tweet_created_date": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "view_count": {
                    "type": "number"
                }
            }
        },
        "model.CRMLoginBody": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "model.CexConnectRequest": {
            "type": "object",
            "properties": {
                "api_key": {
                    "description": "WalletAddress          string   `json:\"wallet_address\" example:\"copytrade-primary\"`",
                    "type": "string",
                    "example": "cex_api_key"
                },
                "api_secret": {
                    "type": "string",
                    "example": "cex_api_secret"
                },
                "exchange": {
                    "type": "string",
                    "example": "binance-th"
                },
                "wallet_name": {
                    "type": "string",
                    "example": "CEX Main"
                }
            }
        },
        "model.CexUpdateAPIKeyRequest": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string",
                    "example": "cex_api_key"
                },
                "api_secret": {
                    "type": "string",
                    "example": "cex_api_secret"
                },
                "exchange": {
                    "type": "string",
                    "example": "binance-th"
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.CexUpdateHoldingPeriodRequest": {
            "type": "object",
            "properties": {
                "holding_period": {
                    "type": "integer"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "model.CexUpdatePositionSizeRequest": {
            "type": "object",
            "properties": {
                "position_size_percentage": {
                    "type": "number",
                    "example": 0.2
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.CexUpdateSLRequest": {
            "type": "object",
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "binance-th"
                },
                "sl_percentage": {
                    "type": "number",
                    "example": 25
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.CexWalletInfo": {
            "type": "object",
            "properties": {
                "authors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SubscribeAuthor"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "holding_hour_period": {
                    "type": "integer"
                },
                "hyperliquid_basecode": {
                    "type": "boolean"
                },
                "leverage": {
                    "type": "integer"
                },
                "position_size_percentage": {
                    "type": "number"
                },
                "priority": {
                    "type": "integer"
                },
                "privy_wallet_id": {
                    "type": "string"
                },
                "sl_percentage": {
                    "type": "number"
                },
                "tp_percentage": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                },
                "wallet_name": {
                    "type": "string"
                },
                "wallet_type": {
                    "type": "string"
                }
            }
        },
        "model.CexWalletTotalValue": {
            "type": "object",
            "properties": {
                "total_value": {
                    "type": "number"
                }
            }
        },
        "model.CheckXUser": {
            "type": "object",
            "properties": {
                "isUserExit": {
                    "type": "boolean"
                },
                "isUserTelegramExit": {
                    "type": "boolean"
                }
            }
        },
        "model.DexConnectRequest": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string",
                    "example": "33rADOAxPstLKpzcJmDPgASDLjs"
                },
                "exchange": {
                    "type": "string",
                    "example": "dydx"
                },
                "private_key": {
                    "type": "string",
                    "example": "0xa5e9ed193e183f0bdd72712a89df949e8a8de3b815caa570c44de8697a93b6fs"
                },
                "trading_account_id": {
                    "type": "string",
                    "example": "516866395334867"
                },
                "wallet_address": {
                    "type": "string",
                    "example": "0xa5e9ed193e183f0bdd72712a89df949e8a8de3b"
                },
                "wallet_name": {
                    "type": "string",
                    "example": "DEX Main"
                }
            }
        },
        "model.DexUpdateAPICredentialsRequest": {
            "type": "object",
            "properties": {
                "api_key": {
                    "type": "string",
                    "example": "dex_api_key"
                },
                "exchange": {
                    "type": "string",
                    "example": "dydx"
                },
                "private_key": {
                    "type": "string",
                    "example": "0xa5e9ed193e183f0bdd72712a89df949e8a8de3b815caa570c44de8697a93b6fs"
                },
                "trading_account": {
                    "type": "string",
                    "example": "516866395334867"
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.DexUpdateHoldingPeriodRequest": {
            "type": "object",
            "properties": {
                "holding_period": {
                    "type": "integer",
                    "example": 48
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.DexUpdateLeverageRequest": {
            "type": "object",
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "dydx"
                },
                "leverage": {
                    "type": "integer",
                    "example": 3
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.DexUpdatePositionSizeRequest": {
            "type": "object",
            "properties": {
                "position_size_percentage": {
                    "type": "number",
                    "example": 0.2
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.DexUpdateSLRequest": {
            "type": "object",
            "properties": {
                "exchange": {
                    "type": "string",
                    "example": "dydx"
                },
                "sl_percentage": {
                    "type": "number",
                    "example": 25
                },
                "wallet_id": {
                    "type": "string",
                    "example": "e50b0c09-18c5-4ff0-a832-54473e1b739e"
                }
            }
        },
        "model.DexWalletTotalValue": {
            "type": "object",
            "properties": {
                "total_value": {
                    "type": "number"
                }
            }
        },
        "model.EmailReq": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "model.KOLUser": {
            "type": "object",
            "properties": {
                "displayCode": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "model.LoginBody": {
            "type": "object",
            "required": [
                "login_type",
                "uid"
            ],
            "properties": {
                "login_type": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        },
        "model.Nav": {
            "type": "object",
            "properties": {
                "datetime": {
                    "type": "string"
                },
                "nav": {
                    "type": "number"
                }
            }
        },
        "model.RefferalScoreRanking": {
            "type": "object",
            "properties": {
                "cryptoUserEmail": {
                    "type": "string"
                },
                "cryptoUserTwitter": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "rankChange": {
                    "type": "integer"
                },
                "totalPoint": {
                    "description": "CryptoUserID string    `db:\"crypto_user_id\"`",
                    "type": "integer"
                }
            }
        },
        "model.SentimentToken": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "sentiment": {
                    "type": "string"
                },
                "ticker": {
                    "type": "string"
                }
            }
        },
        "model.SubscribeAuthor": {
            "type": "object",
            "properties": {
                "author_username": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "model.WalletInfo": {
            "type": "object",
            "properties": {
                "authors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SubscribeAuthor"
                    }
                },
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "holding_hour_period": {
                    "type": "integer"
                },
                "hyperliquid_basecode": {
                    "type": "boolean"
                },
                "leverage": {
                    "type": "integer"
                },
                "position_size_percentage": {
                    "type": "number"
                },
                "priority": {
                    "type": "integer"
                },
                "privy_wallet_id": {
                    "type": "string"
                },
                "sl_percentage": {
                    "type": "number"
                },
                "tp_percentage": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                },
                "wallet_name": {
                    "type": "string"
                },
                "wallet_type": {
                    "type": "string"
                }
            }
        },
        "model.XUser": {
            "type": "object",
            "required": [
                "twitter_name"
            ],
            "properties": {
                "twitter_name": {
                    "type": "string",
                    "example": "NoMoonNoBuy"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer {your-token}\" to authenticate",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}